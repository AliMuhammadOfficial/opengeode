/* CIF PROCESS (150, 150), (150, 75) */
process challenge;
    state on;
    substructure
        in (via_toto);
        out (ret0,uncaught);
            state hello;
            substructure
                    /* CIF procedure (893, 436), (70, 35) */
                    procedure entry;
                        /* CIF START (178, 136), (70, 35) */
                        START;
                            /* CIF PROCEDURECALL (168, 186), (89, 35) */
                            call writeln('8');
                            /* CIF PROCEDURECALL (154, 236), (116, 35) */
                            call writeln('Hello!');
                            /* CIF return (195, 286), (35, 35) */
                            return ;
                    endprocedure;
                    /* CIF START (349, 133), (70, 35) */
                    START;
                        /* CIF NEXTSTATE (319, 183), (128, 35) */
                        NEXTSTATE wait_in_sub_hello;
                    /* CIF state (584, 147), (128, 35) */
                    state wait_in_sub_hello;
                    endstate;
            endsubstructure;
            state aggregation AggregNextToHello;
            substructure
                    state C;
                    substructure
                            /* CIF START (0, 0), (70, 35) */
                            START;
                                /* CIF NEXTSTATE (0, 50), (70, 35) */
                                NEXTSTATE CEH;
                            /* CIF state (116, 0), (70, 35) */
                            state CEH;
                                /* CIF input (100, 55), (72, 35) */
                                input any_two;
                                    /* CIF NEXTSTATE (102, 105), (70, 35) */
                                    NEXTSTATE ceh;
                            endstate;
                    endsubstructure;
                    state D;
                    substructure
                            /* CIF START (80, 0), (70, 35) */
                            START;
                                /* CIF NEXTSTATE (80, 50), (70, 35) */
                                NEXTSTATE DEH;
                            /* CIF state (80, 0), (70, 35) */
                            state DEH;
                            endstate;
                    endsubstructure;
                    /* CIF state (77, 25), (70, 35) */
                    state D;
                    endstate;
                    /* CIF state (157, 0), (70, 35) */
                    state C;
                    endstate;
            endsubstructure;
            /* CIF TEXT (528, 251), (312, 140) */
            dcl myresult T_UInt8 := 4;
            -- Use a variable with the same name as a variable
            -- in the outer scope, to check that code generators
            -- use the proper one
            dcl result T_UInt32 := 9;
            /* CIF ENDTEXT */
            /* CIF procedure (775, 143), (70, 35) */
            procedure exit
            /* CIF comment (865, 119), (137, 83) */
            comment 'Special exit
procedure - called
automatically when
leaving the nested
state';
                /* CIF START (163, 119), (70, 35) */
                START;
                    /* CIF PROCEDURECALL (80, 169), (235, 35) */
                    call writeln('LEAVING the nested state');
                    /* CIF return (180, 219), (35, 35) */
                    return ;
            endprocedure;
            /* CIF procedure (458, 522), (86, 35) */
            procedure inner_proc;
                /* CIF TEXT (31, 41), (277, 140) */
                fpar in toto T_UInt8;
                
                -- Redefine a variable declared in outer scope
                dcl result t_Boolean := true;
                /* CIF ENDTEXT */
                /* CIF START (479, 97), (70, 35) */
                START;
                    /* CIF label (479, 147), (70, 35) */
                    hey_joe:
                    /* CIF PROCEDURECALL (465, 197), (96, 35) */
                    call writeln('10');
                    /* CIF task (461, 247), (104, 35) */
                    task result := false;
                    /* CIF label (479, 297), (70, 35) */
                    leaving:
                    /* CIF return (496, 347), (35, 35) */
                    return ;
            endprocedure;
            /* CIF procedure (772, 54), (70, 35) */
            procedure entry
            /* CIF comment (858, 31), (157, 83) */
            comment 'Special Entry
procedure - called
automatically upon
entrance to the nested
state';
                /* CIF START (191, 78), (70, 35) */
                START;
                    /* CIF PROCEDURECALL (108, 128), (235, 35) */
                    call writeln('ENTERING NESTED STATE');
                    /* CIF return (208, 178), (35, 35) */
                    return ;
            endprocedure;
            /* CIF START (1408, 7), (71, 35) */
            START via_toto ;
                /* CIF PROCEDURECALL (1399, 57), (89, 35) */
                call writeln('3');
                /* CIF return (1427, 107), (35, 35) */
                return ret0;
            /* CIF START (1155, 8), (70, 35) */
            START;
                /* CIF PROCEDURECALL (1145, 58), (89, 35) */
                call writeln('7');
                /* CIF label (1143, 108), (92, 35) */
                inside_label:
                /* CIF PROCEDURECALL (1132, 158), (114, 35) */
                call pow(3,3, result);
                /* CIF decision (1155, 208), (70, 50) */
                decision result;
                    /* CIF ANSWER (1081, 278), (74, 23) */
                    (myresult):
                        /* CIF return (1101, 321), (35, 35) */
                        return uncaught;
                    /* CIF ANSWER (1202, 278), (70, 23) */
                    ELSE:
                        /* CIF task (1187, 316), (98, 35) */
                        task myresult := 5;
                enddecision;
                /* CIF label (1155, 372), (70, 35) */
                nslabel:
                /* CIF NEXTSTATE (1119, 422), (140, 35) */
                NEXTSTATE AggregNextToHello;
            /* CIF label (353, 324), (70, 35) */
            connection to_label:
                /* CIF join (371, 374), (35, 35) */
                join another_floating;
            /* CIF End Label */
            endconnection;
            /* CIF label (733, 472), (122, 35) */
            connection another_floating:
                /* CIF PROCEDURECALL (750, 522), (89, 35) */
                call writeln('9');
                /* CIF task (745, 572), (98, 35) */
                task myresult := 1;
                /* CIF PROCEDURECALL (721, 622), (146, 35) */
                call inner_proc(myresult);
                /* CIF return (777, 672), (35, 35) */
                return ;
            /* CIF End Label */
            endconnection;
            /* CIF state (5, 0), (140, 35) */
            state AggregNextToHello;
            endstate;
            /* CIF state (389, 0), (70, 35) */
            state hello;
                /* CIF input (389, 55), (70, 35) */
                input run;
                    /* CIF PROCEDURECALL (345, 111), (157, 35) */
                    call writeln('27 == ', result);
                    /* CIF task (369, 161), (109, 38) */
                    task myresult := 88,
result := 33;
                    /* CIF join (406, 214), (35, 35) */
                    join to_label;
            endstate;
    endsubstructure;
    state aggregation Safe;
    substructure
            state A;
            substructure
                    /* CIF START (154, 0), (70, 35) */
                    START;
                        /* CIF NEXTSTATE (154, 50), (70, 35) */
                        NEXTSTATE HA;
                    /* CIF state (0, 0), (70, 35) */
                    state HA;
                        /* CIF input (6, 55), (70, 35) */
                        input run;
                            /* CIF NEXTSTATE (6, 105), (70, 35) */
                            NEXTSTATE -;
                    endstate;
            endsubstructure;
            state B;
            substructure
                    /* CIF START (149, 0), (70, 35) */
                    START;
                        /* CIF NEXTSTATE (149, 50), (70, 35) */
                        NEXTSTATE BEH;
                    /* CIF state (10, 0), (70, 35) */
                    state BEH;
                        /* CIF input (0, 55), (72, 35) */
                        input any_one;
                            /* CIF NEXTSTATE (1, 105), (70, 35) */
                            NEXTSTATE beh;
                    endstate;
            endsubstructure;
            /* CIF state (171, 147), (70, 35) */
            state B;
            endstate;
            /* CIF state (160, 0), (70, 35) */
            state A;
            endstate;
    endsubstructure;
    /* CIF TEXT (306, 0), (209, 140) */
    -- This system tests nested states
    
    dcl result T_uint32 :=0;
    /* CIF ENDTEXT */
    /* CIF START (10, 113), (68, 37) */
    START;
        /* CIF PROCEDURECALL (0, 165), (89, 35) */
        call writeln('1');
        /* CIF NEXTSTATE (9, 215), (70, 35) */
        NEXTSTATE OFF;
    /* CIF state (681, 140), (70, 35) */
    state on;
        /* CIF connect (488, 195), (0, 35) */
        connect ;
            /* CIF NEXTSTATE (453, 245), (70, 35) */
            NEXTSTATE off;
        /* CIF connect (569, 195), (0, 35) */
        connect ret0;
            /* CIF NEXTSTATE (534, 245), (70, 35) */
            NEXTSTATE Safe;
        /* CIF connect (787, 195), (70, 35) */
        connect uncaught
        /* CIF comment (877, 195), (141, 38) */
        comment 'Remove it to trigger
an error';
            /* CIF NEXTSTATE (787, 250), (70, 35) */
            NEXTSTATE -;
    endstate;
    /* CIF state (225, 0), (70, 35) */
    state safe;
    endstate;
    /* CIF state (9, 215), (70, 35) */
    state OFF;
        /* CIF input (9, 270), (70, 35) */
        input run;
            /* CIF PROCEDURECALL (0, 320), (89, 35) */
            call writeln('2');
            /* CIF NEXTSTATE (9, 371), (70, 35) */
            NEXTSTATE on
            /* CIF comment (97, 371), (197, 35) */
            comment 'Enter substate via entry point';
    endstate;
endprocess challenge;