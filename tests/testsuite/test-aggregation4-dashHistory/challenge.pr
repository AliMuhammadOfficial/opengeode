/* CIF PROCESS (150, 150), (150, 75) */
process challenge;
    state on;
    substructure
            /* CIF procedure (772, 54), (70, 35) */
            procedure entry
            /* CIF comment (858, 31), (157, 83) */
            comment 'Special Entry
procedure - called
automatically upon
entrance to the nested
state';
                /* CIF START (191, 78), (70, 35) */
                START;
                    /* CIF PROCEDURECALL (181, 133), (89, 35) */
                    call writeln('3');
                    /* CIF PROCEDURECALL (104, 183), (243, 35) */
                    call writeln('(ENTERING NESTED STATE)');
                    /* CIF return (208, 233), (35, 35) */
                    return ;
            endprocedure;
            /* CIF procedure (775, 143), (70, 35) */
            procedure exit
            /* CIF comment (865, 119), (137, 83) */
            comment 'Special exit
procedure - called
automatically when
leaving the nested
state';
                /* CIF START (163, 119), (70, 35) */
                START;
                    /* CIF PROCEDURECALL (153, 174), (89, 35) */
                    call writeln('6');
                    /* CIF PROCEDURECALL (75, 224), (244, 35) */
                    call writeln('(LEAVING the nested state)');
                    /* CIF return (180, 274), (35, 35) */
                    return ;
            endprocedure;
            /* CIF START (1155, 8), (70, 35) */
            START;
                /* CIF PROCEDURECALL (1145, 58), (89, 35) */
                call writeln('4');
                /* CIF NEXTSTATE (1155, 113), (70, 35) */
                NEXTSTATE One;
            /* CIF state (1153, 273), (70, 35) */
            state Two;
                /* CIF input (1151, 328), (72, 35) */
                input any_one;
                    /* CIF PROCEDURECALL (1143, 383), (89, 35) */
                    call writeln('8');
                    /* CIF NEXTSTATE (1153, 433), (70, 35) */
                    NEXTSTATE One;
            endstate;
            /* CIF state (1155, 113), (70, 35) */
            state One;
                /* CIF input (1151, 168), (72, 35) */
                input any_one;
                    /* CIF PROCEDURECALL (1143, 223), (89, 35) */
                    call writeln('5');
                    /* CIF NEXTSTATE (1153, 273), (70, 35) */
                    NEXTSTATE Two;
            endstate;
    endsubstructure;
    /* CIF TEXT (23, 84), (251, 140) */
    -- This test checks the dash history
    -- with nested (not parallel) states
    -- It should go back to the same nested
    -- state after the execution of the 
    -- exit procedure, without going through
    -- entry procedure and startup transition
    -- again.
    /* CIF ENDTEXT */
    /* CIF START (310, 74), (68, 37) */
    START;
        /* CIF PROCEDURECALL (299, 126), (89, 35) */
        call writeln('1');
        /* CIF NEXTSTATE (309, 176), (70, 35) */
        NEXTSTATE OFF;
    /* CIF state (309, 332), (70, 35) */
    state on;
        /* CIF input (261, 387), (72, 35) */
        input any_two
        /* CIF comment (354, 387), (183, 83) */
        comment 'With the dash history,
it is expected to go only
through the exit procedure
but then to go back to the 
same state as before';
            /* CIF PROCEDURECALL (253, 442), (89, 35) */
            call writeln('7');
            /* CIF NEXTSTATE (263, 492), (70, 35) */
            NEXTSTATE -*;
        /* CIF input (557, 387), (70, 35) */
        input run
        /* CIF comment (650, 370), (233, 68) */
        comment 'This branch ends with a standard
history next state, so it is expected
to go through the startup transition
and entry procedure.';
            /* CIF PROCEDURECALL (548, 442), (89, 35) */
            call writeln('9');
            /* CIF NEXTSTATE (557, 497), (70, 35) */
            NEXTSTATE -;
    endstate;
    /* CIF state (309, 176), (70, 35) */
    state OFF;
        /* CIF input (309, 231), (70, 35) */
        input run;
            /* CIF PROCEDURECALL (299, 281), (89, 35) */
            call writeln('2');
            /* CIF NEXTSTATE (309, 332), (70, 35) */
            NEXTSTATE on;
    endstate;
endprocess challenge;