/* CIF PROCESS (150, 150), (150, 75) */
process challenge;
    state on;
    substructure
        in (via_toto);
        out (ret0);
            state hello;
            substructure
                    /* CIF procedure (892, 436), (73, 35) */
                    procedure entry;
                        /* CIF START (178, 136), (70, 35) */
                        START;
                            /* CIF PROCEDURECALL (160, 186), (106, 35) */
                            call writeln('8');
                            /* CIF PROCEDURECALL (145, 236), (136, 35) */
                            call writeln('Hello!');
                            /* CIF return (195, 286), (35, 35) */
                            return ;
                    endprocedure;
                    /* CIF START (349, 133), (70, 35) */
                    START;
                        /* CIF NEXTSTATE (312, 183), (144, 35) */
                        NEXTSTATE wait_in_sub_hello;
                    /* CIF state (582, 147), (144, 35) */
                    state wait_in_sub_hello;
                    endstate;
            endsubstructure;
            /* CIF TEXT (294, 251), (334, 95) */
            dcl myresult T_UInt8 := 4;
            -- Use a variable with the same name as a variable
            -- in the outer scope, to check that code generators
            -- use the proper one
            dcl result T_UInt32 := 9;
            /* CIF ENDTEXT */
            /* CIF procedure (606, 54), (73, 35) */
            procedure entry
            /* CIF comment (695, 31), (190, 88) */
            comment 'Special Entry
procedure - called
automatically upon
entrance to the nested
state';
                /* CIF START (191, 78), (70, 35) */
                START;
                    /* CIF PROCEDURECALL (100, 128), (251, 35) */
                    call writeln('ENTERING NESTED STATE');
                    /* CIF return (208, 178), (35, 35) */
                    return ;
            endprocedure;
            /* CIF procedure (291, 522), (102, 35) */
            procedure inner_proc;
                /* CIF TEXT (31, 41), (364, 93) */
                fpar in toto T_UInt8;
                
                -- Redefine a variable declared in outer scope
                dcl result t_Boolean := true;
                /* CIF ENDTEXT */
                /* CIF START (479, 97), (70, 35) */
                START;
                    /* CIF label (471, 147), (86, 35) */
                    hey_joe:
                    /* CIF PROCEDURECALL (457, 197), (113, 35) */
                    call writeln('10');
                    /* CIF task (453, 247), (121, 35) */
                    task result := false;
                    /* CIF label (473, 297), (82, 35) */
                    leaving:
                    /* CIF return (496, 347), (35, 35) */
                    return ;
            endprocedure;
            /* CIF procedure (610, 143), (70, 33) */
            procedure exit
            /* CIF comment (700, 118), (157, 93) */
            comment 'Special exit
procedure - called
automatically when
leaving the nested
state';
                /* CIF START (163, 119), (70, 35) */
                START;
                    /* CIF PROCEDURECALL (68, 169), (259, 35) */
                    call writeln('LEAVING the nested state');
                    /* CIF return (180, 219), (35, 35) */
                    return ;
            endprocedure;
            /* CIF START (1240, 7), (89, 35) */
            START via_toto ;
                /* CIF PROCEDURECALL (1232, 57), (106, 35) */
                call writeln('3');
                /* CIF return (1267, 107), (35, 35) */
                return ret0;
            /* CIF START (990, 8), (70, 35) */
            START;
                /* CIF PROCEDURECALL (972, 58), (106, 35) */
                call writeln('7');
                /* CIF label (970, 108), (111, 35) */
                inside_label:
                /* CIF PROCEDURECALL (957, 158), (137, 35) */
                call pow(3,3, result);
                /* CIF decision (988, 208), (74, 50) */
                decision result;
                    /* CIF ANSWER (913, 278), (92, 24) */
                    (myresult):
                    /* CIF ANSWER (1037, 278), (70, 24) */
                    ELSE:
                        /* CIF task (1015, 318), (115, 35) */
                        task myresult := 5;
                enddecision;
                /* CIF label (981, 369), (88, 35) */
                nslabel:
                /* CIF NEXTSTATE (990, 419), (70, 35) */
                NEXTSTATE hello;
            /* CIF label (564, 472), (141, 35) */
            connection another_floating:
                /* CIF PROCEDURECALL (578, 522), (113, 35) */
                call writeln('9');
                /* CIF task (577, 572), (115, 35) */
                task myresult := 1;
                /* CIF PROCEDURECALL (553, 622), (164, 35) */
                call inner_proc(myresult);
                /* CIF return (617, 672), (35, 35) */
                return ;
            /* CIF End Label */
            endconnection;
            /* CIF label (184, 324), (90, 35) */
            connection to_label:
                /* CIF join (212, 374), (35, 35) */
                join another_floating;
            /* CIF End Label */
            endconnection;
            /* CIF state (52, 0), (70, 35) */
            state hello;
                /* CIF input (52, 61), (70, 35) */
                input run;
                    /* CIF PROCEDURECALL (0, 111), (175, 35) */
                    call writeln('27 == ', result);
                    /* CIF PROCEDURECALL (52, 161), (70, 35) */
                    call toto;
                    /* CIF task (25, 211), (125, 53) */
                    task myresult := 88,
result := 33;
                    /* CIF join (70, 279), (35, 35) */
                    join to_label;
            endstate;
    endsubstructure;
    /* CIF TEXT (506, 0), (298, 56) */
    -- This system tests nested states
    
    dcl result T_uint32 :=0;
    /* CIF ENDTEXT */
    /* CIF procedure (24, 247), (66, 35) */
    procedure toto;
        /* CIF TEXT (371, 134), (298, 140) */
        -- Declare your variables
        
        -- Syntax: DCL <variable name> <type name>;
        
        dcl i T_Int8  := 1;
        /* CIF ENDTEXT */
        /* CIF START (178, 86), (70, 35) */
        START;
            /* CIF decision (178, 136), (70, 50) */
            decision i;
                /* CIF ANSWER (131, 206), (73, 24) */
                (1):
                    /* CIF task (96, 246), (143, 35) */
                    task i := (i + 1) mod 127;
                    /* CIF return (150, 296), (35, 35) */
                    return ;
                /* CIF ANSWER (249, 206), (70, 24) */
                ELSE:
                    /* CIF PROCEDURECALL (249, 246), (70, 35) */
                    call foo;
                    /* CIF return (266, 296), (35, 35) */
                    return ;
            enddecision;
    endprocedure;
    /* CIF procedure (19, 183), (70, 35) */
    procedure foo;
        /* CIF START (190, 53), (70, 35) */
        START;
            /* CIF return (207, 103), (35, 35) */
            return ;
    endprocedure;
    /* CIF START (526, 99), (68, 37) */
    START;
        /* CIF PROCEDURECALL (507, 151), (106, 35) */
        call writeln('1');
        /* CIF NEXTSTATE (525, 201), (70, 35) */
        NEXTSTATE OFF;
    /* CIF state (496, 356), (132, 35) */
    state on via via_toto
    /* CIF comment (694, 369), (219, 33) */
    comment 'Enter substate via entry point';
        /* CIF connect (527, 411), (70, 35) */
        connect ;
            /* CIF NEXTSTATE (527, 466), (70, 35) */
            NEXTSTATE OFF;
    endstate;
    /* CIF state (525, 201), (70, 35) */
    state OFF;
        /* CIF input (527, 256), (70, 35) */
        input run;
            /* CIF PROCEDURECALL (509, 306), (106, 35) */
            call writeln('2');
            /* CIF NEXTSTATE (496, 356), (132, 35) */
            NEXTSTATE on via via_toto
            /* CIF comment (694, 369), (219, 33) */
            comment 'Enter substate via entry point';
    endstate;
    /* CIF state (1000, 72), (65, 35) */
    state on;
        /* CIF input (1192, 127), (88, 35) */
        input any_one;
            /* CIF NEXTSTATE (1180, 177), (113, 35) */
            NEXTSTATE -;
        /* CIF input (1302, 127), (78, 35) */
        input go_off;
            /* CIF NEXTSTATE (1310, 177), (62, 35) */
            NEXTSTATE OFF;
        /* CIF connect (1033, 127), (0, 35) */
        connect ret0;
            /* CIF PROCEDURECALL (980, 177), (106, 35) */
            call writeln('4');
            /* CIF NEXTSTATE (1000, 227), (67, 35) */
            NEXTSTATE Safe;
        /* CIF connect (717, 127), (0, 35) */
        connect ;
            /* CIF PROCEDURECALL (644, 177), (147, 35) */
            call writeln('11 (end)');
            /* CIF PROCEDURECALL (682, 227), (70, 35) */
            call toto;
            /* CIF NEXTSTATE (682, 277), (70, 35) */
            NEXTSTATE off;
    endstate;
    /* CIF state (156, 285), (73, 35) */
    state Safe;
        /* CIF input (101, 340), (70, 35) */
        input *;
            /* CIF PROCEDURECALL (83, 390), (106, 35) */
            call writeln('5');
            /* CIF PROCEDURECALL (71, 440), (130, 35) */
            call pow(2,2, result);
            /* CIF PROCEDURECALL (52, 490), (168, 35) */
            call writeln('4 == ', result);
            /* CIF NEXTSTATE (101, 540), (70, 35) */
            NEXTSTATE -;
        /* CIF input (296, 340), (88, 35) */
        input any_one;
            /* CIF PROCEDURECALL (283, 390), (113, 35) */
            call writeln('6');
            /* CIF NEXTSTATE (305, 440), (70, 35) */
            NEXTSTATE on;
    endstate;
endprocess challenge;