system og;
    /* CIF TEXT (156, 190), (356, 248) */
    use dv comment 'dataview-uniq.asn';
    
    signal telecommand(tc_type);
    signal telemetry(tm_type);
    /* CIF ENDTEXT */
    channel c
        from env to og with telecommand;
        from og to env with telemetry;
    endchannel;
    block og;
        signalroute r
            from env to og with telecommand;
            from og to env with telemetry;
        connect c and r;
        /* CIF PROCESS (225, 49), (150, 75) */
        process og;
            state aggregation wait;
            substructure
                    state generic_tc_handler_1;
                    substructure
                            /* CIF TEXT (131, 91), (323, 140) */
                            -- Model a generic TC handler. The content of this
                            -- state can be copied several times, to manage
                            -- several TC in parallel.
                            /* CIF ENDTEXT */
                            /* CIF START (490, 84), (70, 35) */
                            START;
                                /* CIF NEXTSTATE (472, 134), (106, 35) */
                                NEXTSTATE wait_for_tc;
                            /* CIF state (667, 182), (123, 35) */
                            state Processing_tc;
                                /* CIF input (689, 237), (78, 35) */
                                input timer1;
                                    /* CIF PROCEDURECALL (631, 287), (193, 35) */
                                    call writeln('TC1 completed');
                                    /* CIF NEXTSTATE (675, 337), (106, 35) */
                                    NEXTSTATE wait_for_tc;
                            endstate;
                            /* CIF state (472, 134), (106, 35) */
                            state wait_for_tc;
                                /* CIF provided (485, 189), (79, 35) */
                                provided got_tc;
                                    /* CIF task (461, 239), (126, 35) */
                                    task got_tc := false;
                                    /* CIF PROCEDURECALL (427, 289), (194, 35) */
                                    call writeln('Processing TC 1');
                                    /* CIF PROCEDURECALL (432, 339), (184, 35) */
                                    call set_timer(5000, timer1);
                                    /* CIF NEXTSTATE (461, 389), (126, 35) */
                                    NEXTSTATE Processing_TC;
                            endstate;
                    endsubstructure;
                    state generic_tc_handler_2;
                    substructure
                            /* CIF TEXT (117, 155), (323, 140) */
                            -- Model a generic TC handler. The content of this
                            -- state can be copied several times, to manage
                            -- several TC in parallel.
                            /* CIF ENDTEXT */
                            /* CIF START (512, 84), (70, 35) */
                            START;
                                /* CIF NEXTSTATE (494, 134), (106, 35) */
                                NEXTSTATE wait_for_tc;
                            /* CIF state (832, 164), (123, 35) */
                            state Processing_tc;
                                /* CIF input (850, 219), (85, 35) */
                                input timer2;
                                    /* CIF PROCEDURECALL (792, 269), (200, 35) */
                                    call writeln('TC2 completed');
                                    /* CIF NEXTSTATE (839, 319), (106, 35) */
                                    NEXTSTATE wait_for_tc;
                            endstate;
                            /* CIF state (494, 134), (106, 35) */
                            state wait_for_tc;
                                /* CIF provided (507, 189), (79, 35) */
                                provided got_tc;
                                    /* CIF task (483, 239), (126, 35) */
                                    task got_tc := false;
                                    /* CIF PROCEDURECALL (446, 289), (201, 35) */
                                    call writeln('Processing TC 2');
                                    /* CIF PROCEDURECALL (454, 339), (184, 35) */
                                    call set_timer(5000, timer2);
                                    /* CIF NEXTSTATE (483, 389), (126, 35) */
                                    NEXTSTATE Processing_TC;
                            endstate;
                    endsubstructure;
                    state tc_router;
                    substructure
                            /* CIF START (144, 56), (70, 35) */
                            START;
                                /* CIF NEXTSTATE (116, 106), (126, 35) */
                                NEXTSTATE wait_for_tc;
                            /* CIF state (116, 106), (126, 35) */
                            state wait_for_tc;
                                /* CIF input (93, 161), (175, 35) */
                                input telecommand(tc);
                                    /* CIF task (107, 211), (146, 35) */
                                    task got_tc := true;
                                    /* CIF NEXTSTATE (145, 261), (70, 35) */
                                    NEXTSTATE -;
                            endstate;
                    endsubstructure;
                    state exception_handler;
                    substructure
                            /* CIF START (264, 78), (70, 35) */
                            START;
                                /* CIF NEXTSTATE (246, 128), (106, 35) */
                                NEXTSTATE wait_for_tc;
                            /* CIF state (246, 128), (106, 35) */
                            state wait_for_tc;
                                /* CIF provided (252, 183), (93, 38) */
                                provided got_tc;
                                    /* CIF PROCEDURECALL (117, 236), (363, 35) */
                                    call writeln('ERROR, all TC handlers are busy - discarding');
                                    /* CIF task (225, 286), (147, 35) */
                                    task failure := true;
                                    /* CIF NEXTSTATE (263, 336), (70, 35) */
                                    NEXTSTATE -;
                            endstate;
                    endsubstructure;
                    /* CIF state (443, 507), (153, 35) */
                    state exception_handler;
                    endstate;
                    /* CIF state (226, 0), (113, 35) */
                    state tc_router;
                    endstate;
                    /* CIF state (381, 338), (169, 35) */
                    state generic_tc_handler_2;
                    endstate;
                    /* CIF state (370, 168), (182, 35) */
                    state generic_tc_handler_1;
                    endstate;
            endsubstructure;
            state safe;
            substructure
                    /* CIF START (153, 96), (70, 35) */
                    START;
                        /* CIF NEXTSTATE (135, 146), (105, 35) */
                        NEXTSTATE Inside_safe;
                    /* CIF state (301, 97), (106, 35) */
                    state Inside_safe;
                    endstate;
            endsubstructure;
            /* CIF TEXT (665, 310), (327, 208) */
            -- This system tests the provided clause
            -- (continuous signal)
            
            dcl tc TC_type;
            
            dcl tm TM_type;
            
            dcl got_tc Boolean_type;
            
            dcl failure boolean_Type := false;
            
            timer timer1, timer2;
            /* CIF ENDTEXT */
            /* CIF START (351, 297), (70, 35) */
            START;
                /* CIF NEXTSTATE (354, 348), (63, 35) */
                NEXTSTATE wait;
            /* CIF state (347, 583), (70, 35) */
            state safe;
            endstate;
            /* CIF state (485, 344), (99, 35) */
            state wait;
                /* CIF provided (345, 399), (97, 40) */
                provided failure;
priority 2;
                    /* CIF PROCEDURECALL (261, 457), (264, 35) */
                    call writeln('Going to SAFE mode');
                    /* CIF NEXTSTATE (358, 507), (70, 35) */
                    NEXTSTATE safe;
                /* CIF provided (535, 399), (113, 40) */
                provided true = false;
priority 1;
                    /* CIF NEXTSTATE (556, 456), (70, 35) */
                    NEXTSTATE wait;
            endstate;
        endprocess og;
    endblock;
endsystem;