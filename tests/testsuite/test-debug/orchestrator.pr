/* CIF PROCESS (295, 56), (150, 75) */
process orchestrator
/* CIF comment (405, 192), (70, 35) */
comment 'Hello';
    /* CIF TEXT (796, 132), (267, 140) */
    -- Text area for declarations and comments
    
    dcl forty Enum_With_Values := foo,
           two      Enum_With_Values := bar;
    /* CIF ENDTEXT */
    /* CIF TEXT (1054, 1760), (267, 140) */
    -- Text area for declarations and comments
    
    dcl checkForRange IntForRangeCheck;
    dcl fs FixedString;
    dcl sef SeqEnumFix;
    dcl lv taSTE_Peek_id := 255;
    /* CIF ENDTEXT */
    /* CIF TEXT (0, 94), (441, 473) */
    dcl seq tastE_Peek_id_list := { 1,2,3,4,5};
    
    dcl fixed FixedString := 'Hello';
    dcl variable VariableString := 'Hello';
    dcl seqboolean SeqBool := { true, false };
    
    dcl seqbool2 SeqBoolFix := { true, false };
    
    dcl seqen SeqEnum := { hello2, world2};
    
    dcl seqen2 SeqEnumFix := { hello, world };
    
    dcl myenum MyEnum := a;
    dcl turlututu MyEnum := a;
    
    dcl check tasTE_Peek_id := 42;
    
    dcl choice Mychoice := c1:TRUE ;
    
    dcl opt SeqOpt := { A TRUE, b FALSE }; -- test optional fields
    dcl somebool boolean := true;
    
    --dcl opt2 SeqOpt := { a somebool, b false }; SHOULD REPORT AND ERROR
    dcl apnd SeqOf2ElemsOrMore := { 5, 6 };
    
    dcl blah Boo;
    --dcl dclRef Seq := {
    --   a blah,  incorrect, it is correctly detected
    --   b { foo a },
    --   c  { 42 }
    --};
    /* CIF ENDTEXT */
    /* CIF procedure (888, 459), (75, 35) */
    procedure numProc;
        /* CIF START (161, 82), (70, 35) */
        START;
            /* CIF decision (161, 137), (70, 50) */
            decision any;
                /* CIF ANSWER (71, 207), (70, 23) */
                ('a'):
                /* CIF ANSWER (161, 207), (70, 23) */
                ('b'):
                /* CIF ANSWER (251, 207), (70, 23) */
                ('c'):
            enddecision;
            /* CIF decision (142, 246), (107, 50) */
            decision num(myenum);
                /* CIF ANSWER (163, 316), (70, 23) */
                else:
            enddecision;
            /* CIF decision (142, 355), (107, 50) */
            decision num(myenum);
                /* CIF ANSWER (163, 425), (70, 23) */
                else:
            enddecision;
            /* CIF return (178, 464), (35, 35) */
            return ;
    endprocedure;
    /* CIF procedure (1582, 175), (87, 35) */
    procedure emptyproc;
    endprocedure;
    /* CIF procedure (1582, 221), (70, 35) */
    procedure p3;
        /* CIF TEXT (51, 35), (170, 140) */
        returns MyEnum;
        /* CIF ENDTEXT */
        /* CIF START (317, 82), (70, 35) */
        START;
            /* CIF return (334, 137), (35, 35) */
            return a;
    endprocedure;
    /* CIF START (596, 224), (80, 36) */
    START;
        /* CIF task (584, 280), (103, 35) */
        task check := '2A'H;
        /* CIF PROCEDURECALL (534, 335), (202, 35) */
        call writeln(num(forty), num(two))
        /* CIF comment (757, 324), (194, 53) */
        comment 'check that num() uses
the actual enumerated value,
not the position';
        /* CIF task (525, 390), (220, 35) */
        task forty := val(4, Enum_With_Values);
        /* CIF decision (601, 440), (70, 50) */
        decision check;
            /* CIF ANSWER (475, 510), (70, 23) */
            (42):
            /* CIF ANSWER (671, 510), (70, 23) */
            else:
                /* CIF PROCEDURECALL (555, 553), (301, 35) */
                call writeln('ERROR, was expecting 42, got ', check);
        enddecision;
        /* CIF task (576, 604), (119, 35) */
        task opt := { B TRUE }
        /* CIF comment (715, 604), (135, 35) */
        comment 'Test optional fields';
        /* CIF decision (582, 654), (107, 50) */
        decision num(myenum);
            /* CIF ANSWER (563, 724), (70, 23) */
            (0):
            /* CIF ANSWER (635, 724), (70, 23) */
            else:
        enddecision;
        /* CIF decision (582, 763), (107, 50) */
        decision num(myenum);
            /* CIF ANSWER (564, 833), (70, 23) */
            (0):
            /* CIF ANSWER (644, 833), (70, 23) */
            else:
        enddecision;
        /* CIF decision (596, 872), (79, 50) */
        decision 'informal'
        /* CIF comment (736, 869), (156, 53) */
        comment 'Informal decision -
check that it is ignored
by the code generator';
            /* CIF ANSWER (572, 942), (70, 23) */
            ('a'):
            /* CIF ANSWER (652, 942), (70, 23) */
            ('2'):
        enddecision;
        /* CIF task (534, 981), (203, 38) */
        task seqboolean := {true, false},
seqboolean := not {true, false};
        /* CIF task (540, 1036), (191, 83) */
        task for x in seqen:
 call writeln(num(x));
 call writeln(num(myenum));
 call writeln(num(myenum));
endfor
        /* CIF comment (765, 1054), (150, 38) */
        comment 'Check that num is not
declared twice';
        /* CIF task (562, 1139), (147, 53) */
        task for x in seqen2:
 call writeln(num(x));
endfor;
        /* CIF task (565, 1210), (140, 53) */
        task for x in seqboolean:
    call writeln(x);
endfor
        /* CIF comment (736, 1213), (149, 35) */
        comment 'FOR with a basic type';
        /* CIF task (535, 1281), (200, 35) */
        task seqboolean := not seqboolean
        /* CIF comment (770, 1278), (262, 35) */
        comment 'check NOT on a SEQUENCE of BOOLEAN';
        /* CIF task (565, 1331), (140, 53) */
        task for x in seqboolean:
    call writeln(x);
endfor;
        /* CIF task (583, 1402), (104, 35) */
        task fixed := 'hello';
        /* CIF task (570, 1452), (131, 35) */
        task variable := 'HELLO';
        /* CIF PROCEDURECALL (558, 1502), (155, 35) */
        call writeln(variable // '!!!');
        /* CIF PROCEDURECALL (511, 1552), (248, 35) */
        call writeln(variable // variable // variable);
        /* CIF task (597, 1602), (76, 35) */
        task seq := {1};
        /* CIF task (565, 1652), (140, 35) */
        task seq := {1} // {2} // {3};
        /* CIF task (563, 1702), (144, 35) */
        task seq := seq // {2} // {1};
        /* CIF task (576, 1757), (118, 35) */
        task seq := {1} // {2,4};
        /* CIF decision (601, 1807), (70, 50) */
        decision any;
            /* CIF ANSWER (508, 1877), (70, 23) */
            ('a'):
                /* CIF PROCEDURECALL (455, 1920), (174, 35) */
                call writeln('Random value a');
            /* CIF ANSWER (693, 1877), (70, 23) */
            ('b'):
                /* CIF PROCEDURECALL (640, 1920), (175, 35) */
                call writeln('Random value b');
        enddecision;
        /* CIF decision (599, 1971), (73, 50) */
        decision myenum
        /* CIF comment (710, 1975), (161, 35) */
        comment 'Check case insensitivity';
            /* CIF ANSWER (528, 2041), (70, 23) */
            (a):
            /* CIF ANSWER (608, 2041), (70, 23) */
            (B):
            /* CIF ANSWER (688, 2041), (70, 23) */
            (c):
            /* CIF ANSWER (768, 2041), (70, 23) */
            (d):
            /* CIF ANSWER (848, 2041), (70, 23) */
            (Ee):
        enddecision;
        /* CIF decision (577, 2080), (117, 50) */
        decision present(choice)
        /* CIF comment (732, 2083), (161, 35) */
        comment 'Check case insensitivity';
            /* CIF ANSWER (555, 2150), (70, 23) */
            (cde2):
            /* CIF ANSWER (635, 2150), (70, 23) */
            ELSE:
        enddecision;
        /* CIF task (570, 2189), (130, 38) */
        task apnd := {5, 6},
apnd := apnd // {7};
        /* CIF task (571, 2247), (129, 53) */
        task for x in range(20):
      fs(1) := 255
endfor;
        /* CIF task (570, 2320), (131, 35) */
        task fs(lv mod 4) := 255;
        /* CIF task (497, 2370), (276, 35) */
        task checkforrange := (checkforrange +1) mod 4;
        /* CIF NEXTSTATE (585, 2420), (101, 35) */
        NEXTSTATE Wait_for_GUI;
    /* CIF state (1182, 479), (70, 35) */
    state Third;
        /* CIF input (1161, 534), (113, 35) */
        input pulse(myenum);
            /* CIF decision (1183, 589), (70, 50) */
            decision call p3
            /* CIF comment (1273, 596), (159, 38) */
            comment 'Should display "call p3"
If not, there is a bug';
                /* CIF ANSWER (1138, 659), (70, 23) */
                (a):
                /* CIF ANSWER (1228, 659), (70, 23) */
                else:
            enddecision;
            /* CIF NEXTSTATE (1168, 698), (98, 35) */
            NEXTSTATE Wait_for_gui;
    endstate;
    /* CIF state (1168, 374), (102, 35) */
    state AnotherState;
        /* CIF input (1160, 429), (113, 35) */
        input pulse(myenum);
            /* CIF NEXTSTATE (1182, 479), (70, 35) */
            NEXTSTATE Third;
    endstate;
    /* CIF state (1169, 167), (101, 35) */
    state Wait_for_GUI;
        /* CIF input (1163, 224), (113, 35) */
        input pulse(myenum);
            /* CIF PROCEDURECALL (1102, 274), (235, 35) */
            call writeln('Got PULSE', num(myenum));
            /* CIF output (1149, 324), (140, 35) */
            output telemetry(myenum);
            /* CIF NEXTSTATE (1168, 374), (102, 35) */
            NEXTSTATE AnotherState;
    endstate;
endprocess orchestrator;