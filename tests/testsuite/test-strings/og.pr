system og;
    /* CIF TEXT (279, 258), (356, 140) */
    -- Text area for declarations and comments
    
    use dv comment 'dataview-uniq.asn';
    
    signal run;
    /* CIF ENDTEXT */
    channel c
        from env to og with run;
    endchannel;
    block og;
        signalroute r
            from env to og with run;
        connect c and r;
        /* CIF PROCESS (253, 105), (150, 75) */
        process og;
            /* CIF TEXT (0, 33), (356, 203) */
            -- Text area for declarations and comments
            
            dcl a List := {'a', 'b', 'foo', 'bar', 'baz'};
            
            dcl result OutStr := '';
            
            dcl sep OutStr := ', ';
            dcl nosep OutStr := '';
            
            dcl strlit outStr := '68656c6c6f'H;
            
            dcl bitstrlit outStr := '01010110'B;
            /* CIF ENDTEXT */
            /* CIF START (639, 63), (70, 35) */
            START;
                /* CIF task (581, 118), (185, 35) */
                task result := result // 'Hello!';
                /* CIF task (623, 169), (102, 35) */
                task result := '';
                /* CIF task (459, 219), (429, 78) */
                task for each in a(2, length(a) - 1):
 result := result // (if length(result) > 0 then sep else nosep fi) // each
endfor
                /* CIF comment (907, 240), (70, 35) */
                comment 'pop ';
                /* CIF PROCEDURECALL (609, 312), (129, 35) */
                call writeln(result);
                /* CIF task (596, 367), (155, 56) */
                task for sep2 in a:
    call writeln(sep2);
endfor
                /* CIF comment (771, 377), (194, 40) */
                comment 'Test to check scope
(sep is also a dcl-variable)';
                /* CIF PROCEDURECALL (509, 441), (330, 35) */
                call writeln('String literal (should be "hello"):', strlit);
                /* CIF NEXTSTATE (639, 491), (70, 35) */
                NEXTSTATE wait;
            /* CIF state (366, 217), (70, 35) */
            state wait;
            endstate;
        endprocess og;
    endblock;
endsystem;