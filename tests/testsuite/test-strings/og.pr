system og;
    /* CIF TEXT (279, 258), (356, 140) */
    -- Text area for declarations and comments
    
    use dv comment 'dataview-uniq.asn';
    
    signal run;
    /* CIF ENDTEXT */
    channel c
        from env to og with run;
    endchannel;
    block og;
        signalroute r
            from env to og with run;
        connect c and r;
        /* CIF PROCESS (253, 105), (150, 75) */
        process og;
            /* CIF TEXT (0, 33), (356, 278) */
            -- Text area for declarations and comments
            
            dcl a List := {'a', 'b', 'foo', 'bar', 'baz'};
            
            dcl result OutStr := '';
            
            dcl sep OutStr := ', ';
            dcl nosep OutStr := '';
            
            dcl strlit outStr := '68656c6c6f'H; -- hello
            
            dcl bitstrlit outStr := '01010110'B;
            
            dcl helloStr Short_String := {'h', 'e', 'l', 'l', 'o'};
            
            dcl ia5 TextString := 'hello';
            
            dcl b Octet;
            /* CIF ENDTEXT */
            /* CIF START (639, 63), (70, 35) */
            START;
                /* CIF task (581, 118), (185, 35) */
                task result := result // 'Hello!';
                /* CIF task (623, 169), (102, 35) */
                task result := '';
                /* CIF task (459, 219), (429, 78) */
                task for each in a(2, length(a) - 1):
 result := result // (if length(result) > 0 then sep else nosep fi) // each
endfor
                /* CIF comment (907, 240), (70, 35) */
                comment 'pop ';
                /* CIF PROCEDURECALL (609, 312), (129, 35) */
                call writeln(result);
                /* CIF task (596, 367), (155, 56) */
                task for sep2 in a:
    call writeln(sep2);
endfor
                /* CIF comment (771, 377), (194, 40) */
                comment 'Test to check scope
(sep is also a dcl-variable)';
                /* CIF PROCEDURECALL (509, 441), (330, 35) */
                call writeln('String literal (should be "hello"):', strlit);
                /* CIF PROCEDURECALL (571, 496), (205, 35) */
                call writeln( '68656c6c6f'H)
                /* CIF comment (796, 496), (215, 40) */
                comment 'hello with quote in comment :
a\'b';
                /* CIF task (609, 546), (130, 56) */
                task for c in helloStr:
 call write(c);
endfor;
                /* CIF PROCEDURECALL (632, 622), (84, 35) */
                call write(' ');
                /* CIF task (625, 677), (97, 35) */
                task ia5 := 'world';
                /* CIF PROCEDURECALL (624, 732), (99, 35) */
                call writeln(ia5);
                /* CIF PROCEDURECALL (580, 787), (187, 35) */
                call writeln("Hello I'm good")
                /* CIF comment (787, 787), (177, 40) */
                comment 'string with double quotes,
embedding single quote';
                /* CIF PROCEDURECALL (577, 842), (194, 35) */
                call writeln('Hello "World"')
                /* CIF comment (791, 842), (178, 40) */
                comment 'string with single quotes,
embedding double quotes';
                /* CIF PROCEDURECALL (577, 897), (194, 35) */
                call writeln('Hello \'World\'')
                /* CIF comment (791, 894), (178, 40) */
                comment 'string with single quotes,
and escaping';
                /* CIF PROCEDURECALL (577, 951), (194, 35) */
                call writeln("Hello \"World\"")
                /* CIF comment (791, 948), (178, 40) */
                comment 'string with double quotes,
and escaping';
                /* CIF task (603, 1006), (142, 35) */
                task b(0) := chr('68'H)
                /* CIF comment (765, 1006), (96, 35) */
                comment 'set value "h"';
                /* CIF PROCEDURECALL (632, 1061), (84, 35) */
                call writeln(b);
                /* CIF NEXTSTATE (639, 1111), (70, 35) */
                NEXTSTATE wait;
            /* CIF state (366, 217), (70, 35) */
            state wait;
            endstate;
        endprocess og;
    endblock;
endsystem;