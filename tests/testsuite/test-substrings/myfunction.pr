/* CIF PROCESS (197, 146), (150, 75) */
process myfunction;
    /* CIF TEXT (0, 133), (282, 216) */
    dcl str MyOctStr := 'abc';
    dcl variable_str String := 'Hello!';
    
    dcl seqof  MySeqOf := {hello, world};
    
    dcl seqint seqInt := {1};
    dcl seqbool seqBool := { true, false};
    dcl seqbool2 seqBool2 := { true, false};
    
    dcl iseq IntSeq := {0,1,2,3};
    dcl fixedseq FixedIntSeq := {0,1,2,3,4};
    dcl n t_UInt8;
    /* CIF ENDTEXT */
    /* CIF TEXT (7, 43), (334, 41) */
    -- Test substrings in various contexts and operators
    /* CIF ENDTEXT */
    /* CIF procedure (1416, 490), (91, 35) */
    procedure factorial;
        /* CIF TEXT (29, 42), (215, 53) */
        fpar in N MyInteger, 
          in/out result MyInteger;
        /* CIF ENDTEXT */
        /* CIF START (298, 33), (70, 35) */
        START;
            /* CIF task (284, 83), (97, 35) */
            task result := 1;
            /* CIF task (223, 133), (220, 56) */
            task for x in range(1, n+1):
    result := (result * x) mod 255
endfor;
            /* CIF return (315, 207), (35, 35) */
            return ;
    endprocedure;
    /* CIF START (353, 217), (65, 37) */
    START;
        /* CIF task (320, 269), (131, 35) */
        task n := iseq(0,2)(0);
        /* CIF PROCEDURECALL (335, 319), (100, 35) */
        call writeln(n)
        /* CIF comment (455, 319), (77, 35) */
        comment 'print 0';
        /* CIF task (306, 369), (158, 40) */
        task iseq := iseq(0,3)(0,2);
        /* CIF task (316, 424), (138, 56) */
        task for x in iseq:
   call writeln(x);
endfor
        /* CIF comment (489, 416), (81, 72) */
        comment 'print
0
1
2';
        /* CIF task (289, 495), (192, 35) */
        task n := length(fixedseq(0,1));
        /* CIF PROCEDURECALL (335, 545), (100, 35) */
        call writeln(n)
        /* CIF comment (455, 545), (83, 35) */
        comment 'print 2';
        /* CIF task (310, 595), (151, 35) */
        task seqof := seqof(0,1)
        /* CIF comment (482, 595), (209, 35) */
        comment 'equivalent to seqof := seqof';
        /* CIF task (303, 650), (165, 35) */
        task n := iseq(0,2)(0,1)(0);
        /* CIF task (315, 700), (141, 35) */
        task n := iseq(100- 1);
        /* CIF decision (324, 750), (123, 50) */
        decision hello in seqof
        /* CIF comment (468, 749), (179, 53) */
        comment 'Check IN operator with
enumerated type';
            /* CIF ANSWER (242, 820), (70, 33) */
            (true):
                /* CIF PROCEDURECALL (188, 868), (177, 35) */
                call writeln(hello in seqof)
                /* CIF comment (386, 868), (114, 35) */
                comment 'print "TRUE"';
            /* CIF ANSWER (505, 820), (70, 33) */
            (false):
        enddecision;
        /* CIF decision (308, 919), (155, 50) */
        decision hello in seqof(0,0)
        /* CIF comment (475, 915), (236, 56) */
        comment 'Check IN operator with
list substring - first element only
should go to branch TRUE';
            /* CIF ANSWER (228, 989), (66, 33) */
            (true):
                /* CIF PROCEDURECALL (160, 1037), (201, 35) */
                call writeln(hello in seqof(0,1))
                /* CIF comment (396, 1036), (114, 35) */
                comment 'print "TRUE"';
            /* CIF ANSWER (518, 989), (70, 33) */
            (false):
        enddecision;
        /* CIF PROCEDURECALL (290, 1088), (191, 35) */
        call writeln(variable_str(0,4))
        /* CIF comment (496, 1086), (113, 35) */
        comment 'print "Hello"';
        /* CIF task (297, 1138), (176, 56) */
        task for x in seqof:
    call writeln(num(x));
endfor
        /* CIF comment (498, 1136), (96, 56) */
        comment 'print:
12
13';
        /* CIF task (295, 1209), (180, 56) */
        task for x in seqof(0,1):
    call writeln(-num(x));
endfor
        /* CIF comment (503, 1207), (96, 56) */
        comment 'print:
-12
-13';
        /* CIF PROCEDURECALL (295, 1280), (180, 35) */
        call writeln(length(seqof))
        /* CIF comment (506, 1278), (77, 35) */
        comment 'print 2';
        /* CIF PROCEDURECALL (281, 1330), (209, 35) */
        call writeln(length(seqof(0,1)))
        /* CIF comment (515, 1328), (77, 35) */
        comment 'print 2';
        /* CIF label (304, 1380), (162, 35) */
        variable_length_seq:
        /* CIF task (314, 1430), (142, 56) */
        task for x in seqint:
    call writeln(x);
endfor
        /* CIF comment (488, 1430), (96, 53) */
        comment 'print:
1';
        /* CIF task (309, 1501), (152, 56) */
        task for x in seqint(0,0):
    call writeln(x);
endfor
        /* CIF comment (478, 1501), (96, 53) */
        comment 'print:
1';
        /* CIF decision (324, 1572), (123, 50) */
        decision 1 in seqint
        /* CIF comment (455, 1569), (179, 53) */
        comment 'Check IN operator with
variable-length seqOf';
            /* CIF ANSWER (215, 1642), (66, 33) */
            (true):
                /* CIF PROCEDURECALL (159, 1690), (177, 35) */
                call writeln(1 in seqint)
                /* CIF comment (369, 1688), (114, 35) */
                comment 'print "TRUE"';
            /* CIF ANSWER (492, 1642), (70, 24) */
            (false):
        enddecision;
        /* CIF decision (321, 1741), (128, 50) */
        decision 1 in seqint(0,0)
        /* CIF comment (460, 1737), (179, 53) */
        comment 'Check IN operator with
variable-length seqOf';
            /* CIF ANSWER (236, 1811), (70, 24) */
            (true):
                /* CIF PROCEDURECALL (180, 1850), (182, 35) */
                call writeln(1 in seqint(0,0))
                /* CIF comment (384, 1847), (114, 35) */
                comment 'print "TRUE"';
            /* CIF ANSWER (508, 1811), (70, 24) */
            (false):
        enddecision;
        /* CIF PROCEDURECALL (295, 1901), (180, 35) */
        call writeln(length(seqint))
        /* CIF comment (499, 1897), (77, 35) */
        comment 'print 1';
        /* CIF PROCEDURECALL (279, 1951), (212, 35) */
        call writeln(length(seqint(0,0)))
        /* CIF comment (514, 1947), (77, 35) */
        comment 'print 1';
        /* CIF task (304, 2001), (163, 35) */
        task seqint := seqint // {2};
        /* CIF task (290, 2051), (190, 35) */
        task seqint := seqint(0,0) // {5};
        /* CIF task (314, 2101), (142, 56) */
        task for x in seqint:
    call writeln(x);
endfor
        /* CIF comment (499, 2097), (96, 56) */
        comment 'print:
1
5';
        /* CIF task (269, 2172), (233, 35) */
        task seqbool := seqbool and seqbool
        /* CIF comment (525, 2168), (194, 35) */
        comment 'should not raise any error';
        /* CIF task (256, 2222), (259, 38) */
        task 'seqbool2 := seqbool2 and seqbool2'
        /* CIF comment (530, 2220), (216, 35) */
        comment 'Variable-length -> raise error';
        /* CIF task (210, 2280), (350, 35) */
        task seqint := seqint // {1, seqint(1)};
        /* CIF task (210, 2335), (350, 35) */
        task seqint := seqint //seqint(1, length(seqint));
        /* CIF task (324, 2390), (123, 35) */
        task n := iseq (1);
        /* CIF task (210, 2440), (350, 35) */
        task iseq := mkstring (iseq(4)) // iseq(1, length(iseq))
        /* CIF comment (580, 2440), (286, 56) */
        comment 'use mkstring when there is only one element
otherwise this is ambiguous for the parser:
{ iseq (4) } - could be a record or an array';
        /* CIF task (277, 2495), (216, 35) */
        task iseq := mkstring(iseq(42), 1);
        /* CIF task (298, 2550), (174, 35) */
        task iseq := mkstring (iseq(43));
        /* CIF NEXTSTATE (351, 2600), (68, 33) */
        NEXTSTATE Wait;
    /* CIF state (839, 313), (70, 35) */
    state wait;
    endstate;
endprocess myfunction;