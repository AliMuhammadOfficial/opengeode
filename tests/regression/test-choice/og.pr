system og;
    /* CIF TEXT (159, 221), (290, 188) */
    -- Text area for declarations and comments
    
    use dv comment 'dataview.asn';
    
    signal dd;
    signal we;
    /* CIF ENDTEXT */
    channel c
        from env to og with dd;
        from og to env with we;
    endchannel;
    block og;
        signalroute r
            from env to og with dd;
            from og to env with we;
        connect c and r;
        /* CIF PROCESS (225, 50), (150, 75) */
        process og;
            /* CIF TEXT (70, 60), (337, 184) */
            --  Test choice assignments and access
            
            dcl ch ChoiceWithEmptySeq;
            
            dcl em EmptySeq := {};
            
            dcl eso SeqOf := {};
            
            dcl param Parameters := one : 5;
            
            dcl param2 Parameters;
            /* CIF ENDTEXT */
            /* CIF START (445, 228), (70, 35) */
            START;
                /* CIF task (431, 278), (98, 35) */
                task ch := b: {};
                /* CIF task (437, 328), (85, 35) */
                task eso := {};
                /* CIF task (427, 378), (106, 35) */
                task em := ch!b
                /* CIF comment (549, 376), (177, 40) */
                comment 'This is ok, there should
be no warning raised';
                /* CIF task (416, 433), (127, 35) */
                task ch:= d: {a  TRUE}
                /* CIF comment (563, 433), (175, 40) */
                comment 'No error, but
ch!d!a := TRUE would fail';
                /* CIF task (309, 488), (341, 35) */
                task param2 := three : (choice_to_int (param, 10) < 10);
                /* CIF NEXTSTATE (445, 538), (70, 35) */
                NEXTSTATE wait;
            /* CIF state (758, 233), (70, 35) */
            state wait;
                /* CIF input (751, 288), (84, 35) */
                input dd;
                    /* CIF output (748, 338), (89, 35) */
                    output we;
                    /* CIF NEXTSTATE (758, 388), (70, 35) */
                    NEXTSTATE wait;
            endstate;
        endprocess og;
    endblock;
endsystem;